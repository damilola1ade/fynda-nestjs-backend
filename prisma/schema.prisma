generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @unique @default(cuid())
  email                  String          @unique
  name                   String
  username               String?         @unique
  avatar                 String?
  cover                  String?
  description            String?
  city                   String?
  country                String?
  password               String?
  blockedBy              Block[]         @relation("BlocksReceived")
  blocks                 Block[]         @relation("BlocksSent")
  comments               Comment[]
  followRequestsReceived FollowRequest[] @relation("FollowRequestsReceived")
  followRequestsSent     FollowRequest[] @relation("FollowRequestsSent")
  followers              Follower[]      @relation("UserFollowers")
  followings             Follower[]      @relation("UserFollowings")
  likes                  Like[]
  Notification           Notification[]
  posts                  Post[]
  trumpets               Trumpet?
}

model Post {
  id        String    @id @unique @default(cuid())
  desc      String
  img       String
  reward    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  comments  Comment[]
  likes     Like[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @unique @default(cuid())
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]
}

model Like {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String?
  commentId String?
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Follower {
  id          String   @id @unique @default(cuid())
  createdAt   DateTime @default(now())
  followerId  String
  followingId String
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
}

model FollowRequest {
  id         String   @id @unique @default(cuid())
  createdAt  DateTime @default(now())
  senderId   String
  receiverId String
  receiver   User     @relation("FollowRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("FollowRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

model Block {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now())
  blockerId String
  blockedId String
  blocked   User     @relation("BlocksReceived", fields: [blockedId], references: [id], onDelete: Cascade)
  blocker   User     @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
}

model Trumpet {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    String   @unique
  img       String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id             String   @id @unique @default(cuid())
  userId         String
  senderId       String
  senderName     String
  avatar         String
  message        String
  seenByReceiver Boolean  @default(false)
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])
}
